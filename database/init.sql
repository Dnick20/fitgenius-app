-- FitGenius Database Schema
-- Auto-generated by DatabaseMigrationOrchestrator

-- Extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- API Schema
CREATE SCHEMA IF NOT EXISTS api;

-- Users table
CREATE TABLE api.users (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL,
  profile JSONB DEFAULT '{}',
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Progress entries
CREATE TABLE api.progress_entries (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES api.users(id) ON DELETE CASCADE,
  weight DECIMAL(5,2),
  body_fat DECIMAL(4,2),
  waist DECIMAL(4,2),
  neck DECIMAL(4,2),
  hip DECIMAL(4,2),
  notes TEXT,
  date DATE DEFAULT CURRENT_DATE,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Workouts
CREATE TABLE api.workouts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES api.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  type TEXT,
  difficulty TEXT,
  duration TEXT,
  calories INTEGER,
  exercises JSONB DEFAULT '[]',
  completed_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Meals
CREATE TABLE api.meals (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES api.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  ingredients JSONB DEFAULT '[]',
  nutrition JSONB DEFAULT '{}',
  meal_type TEXT CHECK (meal_type IN ('breakfast', 'lunch', 'dinner', 'snack')),
  category TEXT,
  prep_time INTEGER,
  cook_time INTEGER,
  servings INTEGER,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Weekly meal plans
CREATE TABLE api.weekly_meal_plans (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES api.users(id) ON DELETE CASCADE,
  meal_id UUID REFERENCES api.meals(id) ON DELETE CASCADE,
  day_of_week INTEGER CHECK (day_of_week BETWEEN 0 AND 6),
  meal_type TEXT CHECK (meal_type IN ('breakfast', 'lunch', 'dinner', 'snack')),
  repetition_index INTEGER DEFAULT 1,
  repetition_count INTEGER DEFAULT 1,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- User workout sessions
CREATE TABLE api.workout_sessions (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES api.users(id) ON DELETE CASCADE,
  workout_id UUID REFERENCES api.workouts(id) ON DELETE CASCADE,
  started_at TIMESTAMPTZ DEFAULT NOW(),
  completed_at TIMESTAMPTZ,
  calories_burned INTEGER,
  notes TEXT,
  exercises_completed JSONB DEFAULT '[]'
);

-- Grocery lists
CREATE TABLE api.grocery_lists (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES api.users(id) ON DELETE CASCADE,
  name TEXT DEFAULT 'Weekly Grocery List',
  items JSONB DEFAULT '[]',
  checked_items JSONB DEFAULT '[]',
  people_count INTEGER DEFAULT 1,
  store_preference TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX idx_users_email ON api.users(email);
CREATE INDEX idx_progress_entries_user_id ON api.progress_entries(user_id);
CREATE INDEX idx_progress_entries_date ON api.progress_entries(date DESC);
CREATE INDEX idx_workouts_user_id ON api.workouts(user_id);
CREATE INDEX idx_meals_user_id ON api.meals(user_id);
CREATE INDEX idx_meals_type ON api.meals(meal_type);
CREATE INDEX idx_weekly_plans_user_id ON api.weekly_meal_plans(user_id);
CREATE INDEX idx_workout_sessions_user_id ON api.workout_sessions(user_id);
CREATE INDEX idx_grocery_lists_user_id ON api.grocery_lists(user_id);

-- Row Level Security
ALTER TABLE api.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE api.progress_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE api.workouts ENABLE ROW LEVEL SECURITY;
ALTER TABLE api.meals ENABLE ROW LEVEL SECURITY;
ALTER TABLE api.weekly_meal_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE api.workout_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE api.grocery_lists ENABLE ROW LEVEL SECURITY;

-- Create roles
CREATE ROLE web_anon NOLOGIN;
CREATE ROLE authenticated NOLOGIN;

-- Grant permissions to anonymous role
GRANT USAGE ON SCHEMA api TO web_anon;

-- Grant permissions to authenticated role
GRANT authenticated TO postgres;
GRANT USAGE ON SCHEMA api TO authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA api TO authenticated;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA api TO authenticated;

-- RLS Policies for authenticated users
CREATE POLICY "Users can view own profile" ON api.users
  FOR ALL TO authenticated USING (auth.uid() = id);

CREATE POLICY "Users can manage own progress" ON api.progress_entries
  FOR ALL TO authenticated USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own workouts" ON api.workouts
  FOR ALL TO authenticated USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own meals" ON api.meals
  FOR ALL TO authenticated USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own meal plans" ON api.weekly_meal_plans
  FOR ALL TO authenticated USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own workout sessions" ON api.workout_sessions
  FOR ALL TO authenticated USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own grocery lists" ON api.grocery_lists
  FOR ALL TO authenticated USING (auth.uid() = user_id);

-- Functions for updated_at timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers for updated_at
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON api.users
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_grocery_lists_updated_at BEFORE UPDATE ON api.grocery_lists
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Auth helper function (for JWT)
CREATE OR REPLACE FUNCTION auth.uid() RETURNS UUID AS $$
  SELECT COALESCE(
    current_setting('request.jwt.claims', true)::json->>'sub',
    (current_setting('request.jwt.claims', true)::json->>'user_id')
  )::uuid;
$$ LANGUAGE sql STABLE;

-- Sample data insert function
CREATE OR REPLACE FUNCTION insert_sample_data() RETURNS void AS $$
BEGIN
  -- This will be populated during migration from localStorage
  RAISE NOTICE 'Sample data function created - ready for migration';
END;
$$ LANGUAGE plpgsql;